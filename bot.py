import os
import logging
import random
import requests
import firebase_admin
from firebase_admin import credentials, db
from aiohttp import web
import asyncio
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext
from telegram.ext import MessageHandler, filters
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telegram import Update
from telegram.ext import ContextTypes
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
import json
import cloudinary
import cloudinary.uploader
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not TOKEN or not WEBHOOK_URL:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å BOT_TOKEN –∏ WEBHOOK_URL!")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(TOKEN).build()
logger.info("Application created successfully")


def update_image_clicks(image_url):
    # –°–æ–∑–¥–∞—ë–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª—é—á, —É–±–∏—Ä–∞—è –∏–ª–∏ –∑–∞–º–µ–Ω—è—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    safe_key = image_url.replace(':', '_').replace('.', '_').replace('/', '_').replace('https', '').replace('http', '')
    ref = db.reference(f"image_clicks/{safe_key}")
    clicks = ref.get().get("clicks", 0) if ref.get() else 0
    ref.set({"clicks": clicks + 1})

ADMIN_ID = 6932848487  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram user_id

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Cloudinary
cloudinary.config(
  cloud_name = os.getenv("CLOUDINARY_CLOUD_NAME"),
  api_key = os.getenv("CLOUDINARY_API_KEY"),
  api_secret = os.getenv("CLOUDINARY_API_SECRET")
)

async def send_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    if not context.args or len(context.args) < 2:
        return await update.message.reply_text("‚ùó –§–æ—Ä–º–∞—Ç: /send <user_id> <—Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∞>")

    try:
        user_id = int(context.args[0])
        message_parts = context.args[1:]

        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_url = None
        for part in message_parts:
            if part.startswith("http") and any(part.lower().endswith(ext) for ext in [".jpg", ".jpeg", ".png", ".gif", ".webp"]):
                image_url = part
                break

        if not image_url:
            return await update.message.reply_text("‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (.jpg/.png/.gif/.webp)")

        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤ caption
        message_parts.remove(image_url)
        caption = ' '.join(message_parts).strip()

        await context.bot.send_photo(chat_id=user_id, photo=image_url, caption=caption or None)
        await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase

import json

firebase_credentials_json = os.getenv("GOOGLE_APPLICATION_CREDENTIALS_JSON")

if not firebase_credentials_json:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_APPLICATION_CREDENTIALS_JSON!")

cred_info = json.loads(firebase_credentials_json)
cred = credentials.Certificate(cred_info)

firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://botchoiseimage-default-rtdb.europe-west1.firebasedatabase.app/'
})



def get_images_from_google_sheets(user_id, sheet_number):
    sheet_name = str(sheet_number).zfill(3)  # "000", "001", "002"
    url = f"https://script.google.com/macros/s/AKfycbwEHVw_Ywb-oJY6NbZkZzxMUjeNypKg_vCXVxxbn1vlEjnEZCh92-U1E2YXEiikETjn/exec?userId={user_id}&sheetName={sheet_name}"
    logger.info(f"–ó–∞–ø—Ä–æ—Å –∫ Google Sheets: {url}")
    response = requests.get(url)
    data = response.json()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")
    return data

def save_to_firebase(user_id, choice, is_correct, image_url):
    ref = db.reference(f"user_choices/{user_id}")
    user_data = ref.get() or {}

    correct = user_data.get("correct", 0)
    wrong = user_data.get("wrong", 0)

    if is_correct:
        correct += 1
    else:
        wrong += 1

    ref.set({"correct": correct, "wrong": wrong})
    update_image_clicks(image_url)  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–∫–æ–≤

def get_user_stats(user_id):
    ref = db.reference(f"user_choices/{user_id}")
    user_data = ref.get() or {}
    return user_data.get("correct", 0), user_data.get("wrong", 0)

async def menu(update: Update, context: CallbackContext) -> None:
    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã
    menu_keyboard = [
        [KeyboardButton("Competition rules", web_app={"url": "https://letomaneteo.github.io/myweb/rulesAIAdealBotIN.html"})],
        [KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–∞", web_app={"url": "https://letomaneteo.github.io/myweb/rulesAIIdealBot.html"})],
        [KeyboardButton("Exciting random game/–ò–≥—Ä–∞ (ru)", web_app={"url": "https://letomaneteo.github.io/myweb/newpage.html"})]
    ]

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    reply_markup = ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True, one_time_keyboard=False)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text("Read the instructions", reply_markup=reply_markup)

async def start(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id

    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –∏–¥–µ—Ç
    if context.user_data.get("game_active", False):
        await update.message.reply_text(
            '‚è≥The bot cannot be restarted between rounds. It restarts automatically only after elimination during the test. Meanwhile, the countdown keeps going.üòìIf you couldn‚Äôt start the bot, please contact <a href="https://t.me/Gordaniele">technical support</a>.',
            parse_mode="HTML"
        )
        return

    context.user_data["game_active"] = True  # –§–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã

    name = update.message.from_user.first_name

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GIF –±–∞–Ω–Ω–µ—Ä –ø–µ—Ä–µ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
    gif_url = "https://res.cloudinary.com/dkkq2bacn/video/upload/v1743234126/output_wmx9hc.mp4"
    await update.message.reply_animation(animation=gif_url)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_correct, total_wrong = get_user_stats(user_id)
    total_games = total_correct + total_wrong

    stats_text = f"Your general statistics:\n‚úÖ Correct: {total_correct}\n‚ùå Incorrect: {total_wrong}"
    if total_games > 0:
        accuracy = round(total_correct / total_games * 100, 2)
        stats_text += f"\nüéØ Accuracy: {accuracy}%"
    else:
        stats_text += "\nYou haven't played yet!"

    keyboard = [[InlineKeyboardButton("Start the test", callback_data="start_game")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
    f"‚úÖ Great, {name}!\n\n"
    "The test is starting. Choose the picture taken by a real photographer, NOT generated by AI.\n"
    "‚è≥ Time to choose: ‚ö†Ô∏è15 seconds‚ö†Ô∏è.\n\n"
    "üéÅ You can win a prize!\n"
    "‚ÑπÔ∏è More information is available in the blue Menu button. ‚¨á"
    "‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî\n\n"
    f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {name}!\n\n" "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Å–¥–µ–ª–∞–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º, –∞ –ù–ï —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.\n" "‚è≥ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞: ‚ö†Ô∏è15 —Å–µ–∫—É–Ω–¥‚ö†Ô∏è.\n\n" "üéÅ –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –ø—Ä–∏–∑!\n" "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∏–Ω–µ–π –∫–Ω–æ–ø–∫–µ –ú–µ–Ω—é. ‚¨á"
    f"{stats_text}",
    reply_markup=reply_markup
)



async def send_images(chat_id, context: CallbackContext) -> None:
    if context.user_data["rounds"] >= 10:
        await show_results(chat_id, context)
        return

    if not context.user_data["current_images"]:
        context.user_data["current_images"] = get_images_from_google_sheets()

    images = context.user_data["current_images"]

    correct_images = [img for img in images if img["is_correct"] == 1 and img["image_url"] not in context.user_data["used_images"]]
    wrong_images = [img for img in images if img["is_correct"] == 0 and img["image_url"] not in context.user_data["used_images"]]

    if not correct_images or not wrong_images:
        await context.bot.send_message(chat_id, "üö®You missed a choice in this place, which reduces the number of points. Be careful!üö®")
        await show_results(chat_id, context)
        return

    correct_image = random.choice(correct_images)
    wrong_image = random.choice(wrong_images)

    image_list = [correct_image, wrong_image]
    random.shuffle(image_list)

    context.user_data["used_images"].add(correct_image["image_url"])
    context.user_data["used_images"].add(wrong_image["image_url"])
    context.user_data["current_image_urls"] = [image_list[0]["image_url"], image_list[1]["image_url"]]

    keyboard1 = [[InlineKeyboardButton("Choose", callback_data=f"choose_1_{image_list[0]['is_correct']}")]]
    keyboard2 = [[InlineKeyboardButton("Choose", callback_data=f"choose_2_{image_list[1]['is_correct']}")]]

    reply_markup1 = InlineKeyboardMarkup(keyboard1)
    reply_markup2 = InlineKeyboardMarkup(keyboard2)

    msg1 = await context.bot.send_photo(chat_id=chat_id, photo=image_list[0]["image_url"], reply_markup=reply_markup1)
    msg2 = await context.bot.send_photo(chat_id=chat_id, photo=image_list[1]["image_url"], reply_markup=reply_markup2)

    context.user_data["messages"] = [msg1.message_id, msg2.message_id]

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ "–æ—Ç–≤–µ—Ç–∏–ª" –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–∞—Ä–æ–π –∫–∞—Ä—Ç–∏–Ω–æ–∫
    context.user_data["answered"] = False

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if "timer_task" in context.user_data and not context.user_data["timer_task"].done():
        context.user_data["timer_task"].cancel()  # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä

    context.user_data["timer_task"] = asyncio.create_task(remove_buttons_after_timeout(chat_id, context, [msg1.message_id, msg2.message_id]))


async def button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    await query.answer()

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç" –∏–ª–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception as e:
        if "Message is not modified" not in str(e):
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å reply_markup: {e}")

    if query.data in ["start_game", "continue_game"]:
        ref = db.reference(f"user_progress/{user_id}")
        progress = ref.get() or {"completed_sheets": []}

        max_sheets = 3  # –£—Å—Ç–∞–Ω–æ–≤–∏ –ª–∏–º–∏—Ç –ª–∏—Å—Ç–æ–≤
        if len(progress["completed_sheets"]) >= max_sheets:
            await show_results(chat_id, context)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        sheet_number = len(progress["completed_sheets"])  # 0, 1, 2
        sheet_name = str(sheet_number).zfill(3)  # "000", "001", "002"

        if sheet_name not in progress["completed_sheets"]:
            progress["completed_sheets"].append(sheet_name)
            ref.set(progress)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞
        images = get_images_from_google_sheets(user_id, sheet_number)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª –ª–∏ Apps Script —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if isinstance(images, dict) and "message" in images:
            await show_results(chat_id, context)
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞
        context.user_data["rounds"] = 0
        context.user_data["correct"] = 0
        context.user_data["wrong"] = 0
        context.user_data["used_images"] = set()
        context.user_data["current_images"] = images
        await context.bot.send_message(chat_id, f"Let's start the set {sheet_name}")  # –û—Ç–ª–∞–¥–∫–∞
        await send_images(chat_id, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    data = query.data.split('_')
    choice = int(data[1])
    is_correct = int(data[2])
    user_id = query.from_user.id

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for msg_id in context.user_data.get("messages", []):
        try:
            await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=msg_id, reply_markup=None)
        except Exception as e:
            if "Message is not modified" not in str(e):
                logger.warning(f"Error while deleting buttons: {e}")

    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
    if "timer_task" in context.user_data and not context.user_data["timer_task"].done():
        context.user_data["timer_task"].cancel()
        del context.user_data["timer_task"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_to_firebase(user_id, choice, is_correct, context.user_data["current_image_urls"][choice - 1])

    context.user_data["rounds"] += 1
    context.user_data["correct"] += 1 if is_correct else 0
    context.user_data["wrong"] += 0 if is_correct else 1

    response_text = f"You have selected the option {choice}: {'‚úÖ Right!' if is_correct else '‚ùå Wrong!'}"
    await query.message.reply_text(response_text)

    context.user_data["answered"] = True

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—Ä—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    await send_images(chat_id, context)

async def remove_buttons_after_timeout(chat_id, context: CallbackContext, message_ids):
    await asyncio.sleep(15)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª, –Ω–µ —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if context.user_data.get("answered", False):
        return

    for msg_id in message_ids:
        try:
            await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=msg_id, reply_markup=None)
        except Exception as e:
            if "Message is not modified" not in str(e):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ —É–∂–µ –Ω–µ—Ç
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫: {e}")

    await context.bot.send_message(chat_id, "‚è≥ 15 seconds have expired, answer not counted.")
    await send_images(chat_id, context)

async def show_results(chat_id, context: CallbackContext) -> None:
    correct = context.user_data.get("correct", 0)
    wrong = context.user_data.get("wrong", 0)
    total = correct + wrong

    result_text = f"""üèÅ *Test completed!*
You did it {total} elections.
‚úÖ Correct: {correct}
‚ùå Incorrect: {wrong}
üéØ Accuracy: {round(correct / total * 100, 2) if total > 0 else 0}%"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = context._user_id or chat_id
    ref = db.reference(f"user_progress/{user_id}")
    progress = ref.get() or {"completed_sheets": []}
    max_sheets = 3  # –õ–∏–º–∏—Ç –ª–∏—Å—Ç–æ–≤


    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    keyboard = [[InlineKeyboardButton("Continue", callback_data="continue_game")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    if len(progress["completed_sheets"]) >= max_sheets:
        result_text += f"\n\nYou have completed all sets ({max_sheets}/{max_sheets}). The 'Continue' button is inactive."

    await context.bot.send_message(chat_id, result_text, parse_mode="Markdown", reply_markup=reply_markup)

import cloudinary.uploader
import datetime

async def handle_media(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    ref = db.reference(f"user_uploads/{user_id}")

    try:
        user_data = ref.get() or {"count": 0}
    except Exception:
        await update.message.reply_text("Database error. Try again later.")
        return

    if user_data["count"] >= 7:
        await update.message.reply_text("You have already uploaded 7 files. Further uploads are unavailable.")
        return

    caption = update.message.caption or ""
    if update.message.photo:
        file = update.message.photo[-1].file_id
        resource_type = "image"
    elif update.message.video:
        file = update.message.video.file_id
        resource_type = "video"
    elif update.message.document:
        file = update.message.document.file_id
        resource_type = "auto"
    else:
        await update.message.reply_text("I only accept photos, videos and documents.")
        return

    try:
        file_obj = await context.bot.get_file(file)
        file_url = file_obj.file_path

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π public_id —Å user_id –∏ –¥–∞—Ç–æ–π
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        public_id = f"{user_id}_{timestamp}"

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ Cloudinary –ø–æ URL
        upload_result = cloudinary.uploader.upload(
            file_url,
            resource_type=resource_type,
            folder=f"user_uploads/{user_id}",
            public_id=public_id
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –∏ –ø–æ–¥–ø–∏—Å—å –≤ Firebase
        ref.child(f"files/{user_data['count'] + 1}").set({
            "cloudinary_url": upload_result["secure_url"],
            "caption": caption,
            "public_id": public_id,
            "upload_time": timestamp
        })
        ref.update({"count": user_data["count"] + 1})

        reply_text = f"Thank you! File saved. ({user_data['count'] + 1}/7)."
        if caption:
            reply_text += f"\n–ü–æ–¥–ø–∏—Å—å: {caption}"
        await update.message.reply_text(reply_text)

    except Exception as e:
        print(e)
        await update.message.reply_text("Error uploading file.")
# === –ò–º–ø–æ—Ä—Ç—ã —Ç–≤–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ ===
# (—Å—é–¥–∞ –≤—Å—Ç–∞–≤–∏–º start, button, menu, send_to_user, handle_media, –∏ –≤—Å–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ)

# –ü—Ä–∏–º–µ—Ä:
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     ...

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("menu", menu))
application.add_handler(CallbackQueryHandler(button))
application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL, handle_media))
application.add_handler(CommandHandler("send", send_to_user))

# === –í–µ–±—Ö—É–∫–∏ –∏ —Å–µ—Ä–≤–µ—Ä ===

async def on_update(request):
    try:
        json_str = await request.json()
        update = Update.de_json(json_str, application.bot)
        if update:
            await application.process_update(update)
        return web.Response()
    except Exception as e:
        logger.error(f"Error handling update: {e}")
        return web.Response(status=500)

async def health_check(request):
    return web.Response(text="Server is running")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
async def set_webhook():
    webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    await application.bot.set_webhook(url=webhook_url)
    logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
async def on_startup(app):
    await application.initialize()
    await set_webhook()

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏
async def on_shutdown(app):
    await application.stop()
    await application.bot.session.close()
    logger.info("Application and Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –°–æ–∑–¥–∞—ë–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = web.Application()
app.router.add_post(f"/{TOKEN}", on_update)
app.router.add_get("/health", health_check)
app.router.add_get("/", health_check)
app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 8080))
    web.run_app(app, host="0.0.0.0", port=port)
